/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package de.buw.se4de;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.HashMap;
import java.util.Map;

/**
 * @author nikhi
 */
public class login extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	public javax.swing.JButton loginBtn;
	public javax.swing.JButton closeBtn;
	public javax.swing.JLabel userNameLabel;
	public javax.swing.JLabel passwordLabel;
	public javax.swing.JPasswordField passwordTextField;
	public javax.swing.JTextField userNameTextField;

	public static boolean testLogin;

	/**
	 * Creates new form login
	 */
	public login() {
		initComponents();
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new login().setVisible(true);
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
//	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	public void initComponents() {
		userNameTextField = new JTextField();
		passwordTextField = new JPasswordField();

		userNameLabel = new JLabel();
		userNameLabel.setText("User ID");
		
		passwordLabel = new JLabel();
		passwordLabel.setText("Password");
		
		loginBtn = new JButton();
		loginBtn.setText("Login");
		loginBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				loginBtnActionPerformed(evt);
			}
		});

		closeBtn = new JButton();
		closeBtn.setText("Close");
		closeBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				closeBtnActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup()
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
						.createSequentialGroup().addGap(47, 47, 47)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(userNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
								.addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(userNameTextField).addComponent(passwordTextField,
										javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
						.addGroup(layout.createSequentialGroup().addGap(75, 75, 75).addComponent(loginBtn)
								.addGap(41, 41, 41).addComponent(closeBtn)))
				.addContainerGap(66, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addGap(68, 68, 68)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(userNameLabel)
								.addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(42, 42, 42)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(passwordLabel).addComponent(passwordTextField,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(30, 30, 30)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(loginBtn).addComponent(closeBtn))
						.addContainerGap(94, Short.MAX_VALUE)));

		this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		this.getRootPane().setDefaultButton(loginBtn);
		this.setSize(400, 400);
		this.setResizable(false);
		this.setLocationRelativeTo(null);
		this.setTitle("Login Page");

		DBConnection.readBooksDB();
		DBConnectionStudent.readStudentsDB();
	}// </editor-fold>//GEN-END:initComponents

	/* Loads and saves user data from/in CSV file */

	public class UserDataManager {
		final Map<String, NewStudent> users = new HashMap<>();
		private final String fileName = "studentDB.csv";

		public void saveUser(NewStudent user) {
			users.put(user.studentID, user);
			// writeUserDataToDisk(users);
		}

		public Map<String, NewStudent> loadAllUsers() {
			users.clear();
			users.putAll(readUserDataFromDisk());
			return users;
		}

		public int authenticateUser(String studentID, String studentPW) {
			if (!checkUser(studentID))
				return -1; // error user doesn't exist
			if (studentID.equals(users.get(studentPW).studentID))
				return 0;
			return 1;
		}

		public boolean checkUser(String studentID) {
			return users.containsKey(studentID);
		}

		/*
		 * private void writeUserDataToDisk(Map<String, User> users) { BufferedWriter bw
		 * = null; try { bw = new BufferedWriter(new FileWriter(fileName)); for
		 * (Map.Entry<String, User> entry : users.entrySet()) { User user =
		 * entry.getValue(); bw.write(user.toString()); bw.newLine(); } } catch
		 * (IOException e) { e.printStackTrace(); } finally { try { bw.close(); } catch
		 * (IOException e) { e.printStackTrace(); } }
		 * 
		 * }
		 */
		private Map<String, NewStudent> readUserDataFromDisk() {
			File file = new File(fileName);
			if (!file.exists()) {
				try {
					file.createNewFile();
				} catch (IOException e) {
					throw new RuntimeException(e);
				}
			}

			Map<String, NewStudent> users = new HashMap<>();
			BufferedReader br = null;
			try {
				br = new BufferedReader(new FileReader(fileName));
				String line = "";
				while ((line = br.readLine()) != null) {
					String[] data = line.split(",");
					String studentID = data[0];
					String StudentPW = data[1];

//                    users.put(studentID, new NewStudent(studentID, studentPW));
					users.put(studentID, new NewStudent());
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}catch (ArrayIndexOutOfBoundsException e) {
				System.out.println(e.toString());
			}finally {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return users;
		}
	}

	public void loginBtnActionPerformed(ActionEvent evt) {
		System.out.println("counter");// GEN-FIRST:event_jButton1ActionPerformed
		String id = userNameTextField.getText();
		String pw = passwordTextField.getText();
		boolean isLogin = DBConnectionStudent.isValidId(id, pw);
		
		if(isLogin == true) {
			setLoginCheck();
			setVisible(false);
			new de.buw.se4de.home().setVisible(true);
		}
		else {
			testLogin = false;
			JOptionPane.showMessageDialog(null, "incorrect username or password");
		}
	}
	// TODO add your handling code here:
	// GEN-LAST:event_jButton1ActionPerformed

	public static void setLoginCheck() {
		testLogin = true;
	}

	public static boolean getLoginCheck() {
		return testLogin;
	}

	private void closeBtnActionPerformed(ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		System.exit(0); // TODO add your handling code here:
	}// GEN-LAST:event_jButton2ActionPerformed
		// End of variables declaration//GEN-END:variables
}

